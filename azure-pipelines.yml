# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  db: $(DATABASE)
  db_user: $(DATABASE_USER)
  db_pass: $(DATABASE_PASS)
  namespace: $(NAMESPACE)
  deployment_api: $(DEPLOYMENT_API)
  deployment_fhir: $(DEPLOYMENT_FHIR)

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'LINK Default'
    namespace: 'demo'
    command: 'scale'
    arguments: 'deployment $(deployment_api) --replicas=0 -n $(namespace)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'

- task: Kubernetes@2
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'LINK Default'
    namespace: 'demo'
    command: 'scale'
    arguments: 'deployment $(deployment_fhir) --replicas=0 -n $(namespace)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'

- task: AzureCLI@2
  inputs:
    azureSubscription: 'postgres-connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'

    inlineScript: |
      export PGPASSWORD=$(db_pass)
      psql --host=nhsnlink-db.postgres.database.azure.com --username=$(db_user) --no-password --dbname=$(db) << EOF
      DROP SCHEMA public CASCADE;
      CREATE SCHEMA public;
      GRANT ALL ON SCHEMA public TO it;
      GRANT ALL ON SCHEMA public TO public;
      COMMENT ON SCHEMA public IS 'standard public schema created by script';
      EOF

- task: Kubernetes@3
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'LINK Default'
    namespace: 'demo'
    command: 'scale'
    arguments: 'deployment $(deployment_api) --replicas=1 -n $(namespace)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'

- task: Kubernetes@4
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'LINK Default'
    namespace: 'demo'
    command: 'scale'
    arguments: 'deployment $(deployment_fhir) --replicas=1 -n $(namespace)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'